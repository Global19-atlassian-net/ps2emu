.TH PS2EMU-REPLAY 1 "ps2emu-replay __version__"
.SH NAME
ps2emu-replay \- an application to replay a PS/2 device using the ps2emu kernel
module
.SH SYNOPSIS
.B ps2emu-replay \fR[\fI\-hV\fR] <\fIrecording\fR>
.
.\"*****************************************************************************
.SH DESCRIPTION
.
\fBps2emu-replay\fR is an application that emulates a PS/2 device by replaying
all of the events found in a recording created by \fBps2emu-record\fR. Because
it's not feasible for us to emulate a fully functional device, the device
created by \fBps2emu-replay\fR simply plays back all of the events in the log,
and will simply not respond to a device driver that sends data that wasn't
originally in the log. This means event logs may not work between kernel
versions if the behavior of the PS/2 device driver in question has changed.

In order for \fBps2emu-replay\fR to be able to replay a PS/2 device, the
\fBps2emu\fR kernel module must be loaded and the program must have access to
the /dev/ps2emu device.
.
.\"*****************************************************************************
.SH OPTIONS
.
.SS
.TP
.BR \-h\fR,\ \fB\-\-help
Print a summary of command line options, and quit.
.TP
.BR \-V\fR,\ \fB\-\-version
Print the version of ps2emu-record, and quit.
.TP
.BR \-v\fR,\ \fB\-\-verbose
Turns on printing of events being sent and received over /dev/userio.
.TP
.BR \-n\fR,\ \fB\-\-no\-events
Don't replay any of the actual input events from the device, just create the
device with the initialization sequence in the log.
.TP
.BR \-r\fR,\ \fB\-\-keep\-running
Don't exit immediately after playing the recording, keep running until we
receive a keyboard interrupt, or anything else that would kill the process.
.TP
.BR \-w\fR,\ \fB\-\-max-wait=\fIn\fR
Don't wait any longer then \fIn\fR seconds between events. This helps in
situations where the recorded event log is very long, and there happen to be
long gaps between each set of events so that the developer doesn't need to wait
each time.
.TP
.BR \-d\fR,\ \fB\-\-event-delay=\fIn\fR
Wait \fIn\fR seconds after initializing the device before we replay the events.
Useful in cases where you might need to attach a tool such as evtest to the
input device.

By default, we always wait half a second before replaying the events (otherwise
the device goes out of sync).
.TP
.BR \-D\fR,\ \fB\-\-note-delay=\fIn\fR
Wait \fIn\fR after printing a user note. For more information, see the \fBUSER
NOTES\fR section for more information on user notes.
.
.\"*****************************************************************************
.SH "USER NOTES"
Many times when playing back a recording, a user might perform multiple actions,
all of which the developer is interested in seeing. For example, one user might
record a single click, double click, and triple click to demonstrate a bug with
their touchpad driver. In cases like this, it can be useful to have
\fBps2emu-replay\fR notify you between each of these actions, and even add a
delay between each of them. For this reason, V1 logs support a feature called
user notes. These are lines that may be inserted anywhere in the main event
section of a log with a custom annotation. To insert a usernote, create a line
in the log before the series of events you'd like to make note of that looks
like this:
.EX

    N: \fIMessage\fR

.EE
Where \fIMessage\fR is the message you would like \fBps2emu-record\fR to display
once the line is reached. Any characters may be used in the message, so long as
the message remains on a single line.
.
.\"*****************************************************************************
.SH "CONVERTING LOGS TO V1"
Just about all of the extra options (\fB\-\-no-events\fR,
\fB\-\-keep-running\fR, etc.) don't do anything when being used with a V0 log.
The reason for this being that because of the limitations of the original
logging format, most of these features are impossible to implement. If you need
any of these features, here's the steps you need to take to convert a V0 log to
a V1 log:
.IP \(bu
Change the version of the log header from V0 to V1
.IP \(bu
Prefix every event with "E: " to mark it as an event
.IP \(bu
Remove the second column from each event (this column will either contain "A" or
"K")
.IP \(bu
Add the following two lines directly below the log header:
.EX

    T: \fIPortType\fR
    S: Init

.EE
Where \fIPortType\fR is either "A" (indicates that the device being recorded is
on the AUX port) or "K" (indicates that the device being recorded is on the KBD
port)
.IP \(bu
Figure out where the device initialization ends. The device initialization is
the data that's sent to and from the PS/2 device in order to set it up with the
operating system, and occurs before any of the actual input events are received
from the device. With mice devices, this is where the mouse sends the 0xF4
(begin data reporting) command to the host, and the host responds with a final
0xFF (acknowledge). So, the lines will look something like this:
.EX

    5528124    S f4 # (parameter)
    5530868    R fa # (interrupt, 1, 12)

.EE
After those two lines, just about every single line should be an interrupt. When
you find the end of the initialization sequence, insert this line directly below
the end of it:
.EX

    S: Main

.EE
.IP \(bu
Take note of the time the first event after the main section starts. The time of
the event will be the first number after the "E: ". Then, subtract this time
from every single event in the main section (including the first event). So, if
we had a few events that looked like this:
.EX

    S: Main
    E: 6610789    R 90 # (interrupt, 1, 12)
    E: 6611976    R b8 # (interrupt, 1, 12)
    E: 6613205    R 24 # (interrupt, 1, 12)
    E: 6614486    R c0 # (interrupt, 1, 12)
    E: 6615698    R f2 # (interrupt, 1, 12)
    E: 6616910    R 2e # (interrupt, 1, 12)

.EE
The time we'd be subtracting from every event would be "6610789", so we'd come
out with something looking like this:
.EX

    S: Main
    E: 0          R 90 # (interrupt, 1, 12)
    E: 1187       R b8 # (interrupt, 1, 12)
    E: 2416       R 24 # (interrupt, 1, 12)
    E: 3697       R c0 # (interrupt, 1, 12)
    E: 4909       R f2 # (interrupt, 1, 12)
    E: 6121       R 2e # (interrupt, 1, 12)

.EE
.P
Please note that logs which contain both events from the KBD port and the AUX
port cannot be ported to V0 unless you remove events from one of the two ports.
.
.\"*****************************************************************************
.SH "SEE ALSO"
.
.BR ps2emu-record (1)
.\" vim: set ft=groff :
